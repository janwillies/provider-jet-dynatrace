/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DdusObservation struct {
}

type DdusParameters struct {

	// Annual environment quota. Not set if unlimited
	// +kubebuilder:validation:Optional
	Annual *float64 `json:"annual,omitempty" tf:"annual,omitempty"`

	// Monthly environment quota. Not set if unlimited
	// +kubebuilder:validation:Optional
	Monthly *float64 `json:"monthly,omitempty" tf:"monthly,omitempty"`
}

type DemUnitsObservation struct {
}

type DemUnitsParameters struct {

	// Annual environment quota. Not set if unlimited
	// +kubebuilder:validation:Optional
	Annual *float64 `json:"annual,omitempty" tf:"annual,omitempty"`

	// Monthly environment quota. Not set if unlimited
	// +kubebuilder:validation:Optional
	Monthly *float64 `json:"monthly,omitempty" tf:"monthly,omitempty"`
}

type EnvironmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EnvironmentParameters struct {

	// The display name of the environment
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Environment level consumption and quotas information
	// +kubebuilder:validation:Optional
	Quotas []QuotasParameters `json:"quotas,omitempty" tf:"quotas,omitempty"`

	// Indicates whether the environment is enabled or disabled. Possible values are `ENABLED` and `DISABLED`. The default value is ENABLED
	// +kubebuilder:validation:Required
	State *string `json:"state" tf:"state,omitempty"`

	// Environment level storage usage and limit information
	// +kubebuilder:validation:Required
	Storage []StorageParameters `json:"storage" tf:"storage,omitempty"`

	// A set of tags that are assigned to this environment. Every tag can have a maximum length of 100 characters
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies whether the environment is a trial environment or a non-trial environment. Creating a trial environment is only possible if your license allows that. The default value is false (non-trial)
	// +kubebuilder:validation:Optional
	Trial *bool `json:"trial,omitempty" tf:"trial,omitempty"`
}

type LimitsObservation struct {
}

type LimitsParameters struct {

	// Log monitoring storage usage and limit information on environment level in bytes. Not editable when Log monitoring is not allowed by license or not configured on cluster level. 0 for unlimited.
	// +kubebuilder:validation:Optional
	Logs *float64 `json:"logs,omitempty" tf:"logs,omitempty"`

	// Session replay storage usage and limit information on environment level in bytes. 0 for unlimited.
	// +kubebuilder:validation:Optional
	SessionReplay *float64 `json:"sessionReplay,omitempty" tf:"session_replay,omitempty"`

	// Session replay storage usage and limit information on environment level in bytes. 0 for unlimited.
	// +kubebuilder:validation:Optional
	SymbolFiles *float64 `json:"symbolFiles,omitempty" tf:"symbol_files,omitempty"`

	// Transaction storage usage and limit information on environment level in bytes. 0 for unlimited.
	// +kubebuilder:validation:Optional
	Transactions *float64 `json:"transactions,omitempty" tf:"transactions,omitempty"`
}

type LogsObservation struct {
}

type LogsParameters struct {

	// Annual environment quota. Not set if unlimited
	// +kubebuilder:validation:Optional
	Annual *float64 `json:"annual,omitempty" tf:"annual,omitempty"`

	// Monthly environment quota. Not set if unlimited
	// +kubebuilder:validation:Optional
	Monthly *float64 `json:"monthly,omitempty" tf:"monthly,omitempty"`
}

type QuotasObservation struct {
}

type QuotasParameters struct {

	// Davis Data Units consumption and quota information on environment level. Not set (and not editable) if Davis data units is not enabled
	// +kubebuilder:validation:Optional
	Ddus []DdusParameters `json:"ddus,omitempty" tf:"ddus,omitempty"`

	// DEM units consumption and quota information on environment level
	// +kubebuilder:validation:Optional
	DemUnits []DemUnitsParameters `json:"demUnits,omitempty" tf:"dem_units,omitempty"`

	// Host units consumption and quota information on environment level
	// +kubebuilder:validation:Optional
	HostUnits *float64 `json:"hostUnits,omitempty" tf:"host_units,omitempty"`

	// Log Monitoring consumption and quota information on environment level. Not set (and not editable) if Log monitoring is not enabled. Not set (and not editable) if Log monitoring is migrated to Davis data on license level
	// +kubebuilder:validation:Optional
	Logs []LogsParameters `json:"logs,omitempty" tf:"logs,omitempty"`

	// Synthetic monitors consumption and quota information on environment level. Not set (and not editable) if neither Synthetic nor DEM units is enabled
	// +kubebuilder:validation:Optional
	Synthetic []SyntheticParameters `json:"synthetic,omitempty" tf:"synthetic,omitempty"`

	// User sessions consumption and quota information on environment level
	// +kubebuilder:validation:Optional
	UserSessions []UserSessionsParameters `json:"userSessions,omitempty" tf:"user_sessions,omitempty"`
}

type RetentionObservation struct {
}

type RetentionParameters struct {

	// Log monitoring retention settings on environment level in days. Not editable when Log monitoring is not allowed by license or not configured on cluster level. Can be set to any value from 5 to 90 days
	// +kubebuilder:validation:Required
	Logs *float64 `json:"logs" tf:"logs,omitempty"`

	// Real user monitoring retention settings on environment level in days. Can be set to any value from 1 to 35 days
	// +kubebuilder:validation:Required
	Rum *float64 `json:"rum" tf:"rum,omitempty"`

	// Service code level retention settings on environment level in days. Service code level retention time can't be greater than service request level retention time and both can't exceed one year
	// +kubebuilder:validation:Required
	ServiceCodeLevel *float64 `json:"serviceCodeLevel" tf:"service_code_level,omitempty"`

	// Service request level retention settings on environment level in days. Service code level retention time can't be greater than service request level retention time and both can't exceed one year
	// +kubebuilder:validation:Required
	ServiceRequestLevel *float64 `json:"serviceRequestLevel" tf:"service_request_level,omitempty"`

	// Session replay retention settings on environment level in days. Can be set to any value from 1 to 35 days
	// +kubebuilder:validation:Required
	SessionReplay *float64 `json:"sessionReplay" tf:"session_replay,omitempty"`

	// Synthetic monitoring retention settings on environment level in days. Can be set to any value from 1 to 35 days
	// +kubebuilder:validation:Required
	Synthetic *float64 `json:"synthetic" tf:"synthetic,omitempty"`
}

type StorageObservation struct {
}

type StorageParameters struct {

	// +kubebuilder:validation:Optional
	Limits []LimitsParameters `json:"limits,omitempty" tf:"limits,omitempty"`

	// +kubebuilder:validation:Optional
	Retention []RetentionParameters `json:"retention,omitempty" tf:"retention,omitempty"`

	// Maximum number of newly monitored entry point PurePaths captured per process/minute on environment level. Can be set to any value from 100 to 100000
	// +kubebuilder:validation:Required
	Transactions *float64 `json:"transactions" tf:"transactions,omitempty"`

	// Maximum number of user actions generated per minute on environment level. Can be set to any value from 1 to 2147483646 or left unlimited by omitting this property
	// +kubebuilder:validation:Optional
	UserActions *float64 `json:"userActions,omitempty" tf:"user_actions,omitempty"`
}

type SyntheticObservation struct {
}

type SyntheticParameters struct {

	// Annual environment quota. Not set if unlimited
	// +kubebuilder:validation:Optional
	Annual *float64 `json:"annual,omitempty" tf:"annual,omitempty"`

	// Monthly environment quota. Not set if unlimited
	// +kubebuilder:validation:Optional
	Monthly *float64 `json:"monthly,omitempty" tf:"monthly,omitempty"`
}

type UserSessionsObservation struct {
}

type UserSessionsParameters struct {

	// Annual total User sessions environment quota. Not set if unlimited
	// +kubebuilder:validation:Optional
	Annual *float64 `json:"annual,omitempty" tf:"annual,omitempty"`

	// Monthly total User sessions environment quota. Not set if unlimited
	// +kubebuilder:validation:Optional
	Monthly *float64 `json:"monthly,omitempty" tf:"monthly,omitempty"`
}

// EnvironmentSpec defines the desired state of Environment
type EnvironmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvironmentParameters `json:"forProvider"`
}

// EnvironmentStatus defines the observed state of Environment.
type EnvironmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvironmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Environment is the Schema for the Environments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatracejet}
type Environment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EnvironmentSpec   `json:"spec"`
	Status            EnvironmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentList contains a list of Environments
type EnvironmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Environment `json:"items"`
}

// Repository type metadata.
var (
	Environment_Kind             = "Environment"
	Environment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Environment_Kind}.String()
	Environment_KindAPIVersion   = Environment_Kind + "." + CRDGroupVersion.String()
	Environment_GroupVersionKind = CRDGroupVersion.WithKind(Environment_Kind)
)

func init() {
	SchemeBuilder.Register(&Environment{}, &EnvironmentList{})
}
